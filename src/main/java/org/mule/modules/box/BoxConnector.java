/**
 * Copyright (c) MuleSoft, Inc. All rights reserved. http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.md file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.box;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;
import javax.ws.rs.core.MediaType;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.mule.DefaultMuleMessage;
import org.mule.api.MuleContext;
import org.mule.api.MuleException;
import org.mule.api.MuleMessage;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.lifecycle.Start;
import org.mule.api.annotations.lifecycle.Stop;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.api.context.MuleContextAware;
import org.mule.commons.jersey.JerseyUtil;
import org.mule.construct.Flow;
import org.mule.modules.box.jersey.AuthBuilderBehaviour;
import org.mule.modules.box.jersey.BoxResponseHandler;
import org.mule.modules.box.jersey.MediaTypesBuilderBehaviour;
import org.mule.modules.box.model.Comment;
import org.mule.modules.box.model.Entries;
import org.mule.modules.box.model.File;
import org.mule.modules.box.model.Folder;
import org.mule.modules.box.model.FolderItems;
import org.mule.modules.box.model.SharedLink;
import org.mule.modules.box.model.ThumbnailSize;
import org.mule.modules.box.model.descriptor.FolderItem;
import org.mule.modules.box.model.request.CopyItemRequest;
import org.mule.modules.box.model.request.CreateFolderRequest;
import org.mule.modules.box.model.request.CreateSharedLinkRequest;
import org.mule.modules.box.model.request.RestoreTrashedItemRequest;
import org.mule.modules.box.model.request.UpdateItemRequest;
import org.mule.modules.box.model.response.FileVersionResponse;
import org.mule.modules.box.model.response.GetAuthTokenResponse;
import org.mule.modules.box.model.response.GetCommentsResponse;
import org.mule.modules.box.model.response.GetTicketResponse;
import org.mule.modules.box.model.response.UploadFileResponse;
import org.mule.modules.boxnet.callback.AuthCallbackAdapter;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.WebResource.Builder;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.json.JSONConfiguration;
import com.sun.jersey.core.impl.provider.entity.FormMultivaluedMapProvider;
import com.sun.jersey.core.impl.provider.entity.FormProvider;
import com.sun.jersey.core.impl.provider.entity.InputStreamProvider;
import com.sun.jersey.core.impl.provider.entity.MimeMultipartProvider;
import com.sun.jersey.multipart.FormDataMultiPart;
import com.sun.jersey.multipart.file.StreamDataBodyPart;
import com.sun.jersey.multipart.impl.MultiPartWriter;

/**
 * Box Cloud Connector for API V2.
 * 
 * @author mariano.gonzalez@mulesoft.com
 */
@Connector(name="box", schemaVersion="2.0", friendlyName="Box", minMuleVersion="3.3")
public class BoxConnector implements MuleContextAware {
    
	private static final Logger logger = Logger.getLogger(BoxConnector.class);
	
	private static final String BOX_AUTH_TICKET = "boxAuthTicket";
	private static final String BOX_AUTH_TOKEN = "boxAuthToken";
	
	private Client client;
	
	private MuleContext muleContext;
	private AuthCallbackAdapter authCallback;
	
    
	/**
	 * The api's base url
	 */
	@Configurable
	@Optional
	@Default("https://api.box.com/2.0/")
	private String baseUrl;
	
	/**
	 * The url of the endpoints dedicated to file uploading operations
	 */
	@Configurable
	@Optional
	@Default("https://upload.box.com/api/2.0/files")
	private String uploadUrl;
	
	/**
	 * The url where the user needs to enter his credentials
	 */
	@Configurable
	@Optional
	@Default("https://www.box.com/api/1.0/rest")
	private String authUrl;
	
	/**
     * The API key obtained when registering a project with the Box platform.
     * For more information about this field please refer to {@link http://developers.box.net/}
     */
    @Configurable
    private String apiKey;
    
    /**
     * If true, an http inbound endpoint will be set in place to receive a callback
     * from box.net with the authToken once the user has authenticated.
     * 
     * If this callback is in place, there's no need for you to manually
     * invoke the get-auth-token processor.
     * 
     * For more info look at http://developers.box.net/w/page/12923915/ApiAuthentication
     * 
     * Defaults to false
     */
    @Optional
    @Configurable
    @Default("false")
    private boolean usesCallback = false;
    
    
    /**
     * The url where box.net will direct the authentication callback.
     * For more info look at http://developers.box.net/w/page/12923915/ApiAuthentication
     * 
     * Defaults to box_auth_callback
     */
    @Optional
    @Configurable
    @Default("box_auth_callback")
    private String callbackPath = "box_auth_callback";
   
    /**
     * The port where the authentication callback will be listening on
     * Defaults to 8080
     */
    @Optional
    @Configurable
    @Default("8080")
    private Integer callbackPort;
    
    /**
     * The name of a flow to be executed each time the authentication token
     * needs to be used. If this attribute is specified, 	then a flow with this named
     * will be fetch on the registry and invoked every time the auth token is needed.
     * This flow will receive a copy of the current mule message and must set the payload
     * to a valid auth token. If the flow fails to accomplish that, an exception will be thrown
     * 
     * For example:
     * 
     * &lt;box:config apiKey="${apiKey}" restoreAuthTokenFlow="restoreTokenFlow" saveAuthTokenFlow="saveTokenFlow"/&gt;
     * 
     *  &lt;flow name="restoreTokenFlow"&gt;
     *		&lt;objectstore:retrieve key="flowVars['currentUserId']"/&gt;
     *	&lt;/flow&gt;
     *
     *	&lt;flow name="save"&gt;
     *		&lt;objectstore:store key="flowVars['currentUserId']" value-ref="#[flowVars['boxAuthToken']]"/&gt;
     *	&lt;/flow&gt;
     *
     *	If this attribute is not specified, then the token will be fetched from memory. Notice that this means the token won't survive
     * an application restart and that the connector would be incapable of handling two different concurrent accounts
     */
    @Configurable
    @Optional
    private String restoreAuthTokenFlow;
    
    /**
     * The name of a flow to be executed each time an authentication token
     * is received. If this attribute is specified, then a flow with this name
     * will be fetch on the registry and invoked every time the auth token is obtained.
     * This flow will receive a copy of the current mule message carrying two additional invocation variables:
     * 
     * <ul>
     * 	<li>boxAuthTicket: The ticket for which the authorization token was generated</li>
     * 	<li>boxAuthToken: The obtained authorization token
     * </ul>
     * 
     * For example:
     * 
     * &lt;box:config apiKey="${apiKey}" restoreAuthTokenFlow="restoreTokenFlow" saveAuthTokenFlow="saveTokenFlow"/&gt;
     * 
     *  &lt;flow name="restoreTokenFlow"&gt;
     *		&lt;objectstore:retrieve key="flowVars['currentUserId']"/&gt;
     *	&lt;/flow&gt;
     *
     *	&lt;flow name="save"&gt;
     *		&lt;objectstore:store key="flowVars['currentUserId']" value-ref="#[flowVars['boxAuthToken']]"/&gt;
     *	&lt;/flow&gt;
     *
     * If this attribute is not specified, then the token will be stored in memory. Notice that this means the token won't survive
     * an application restart and that the connector would be incapable of handling two different concurrent accounts
     */
    @Configurable
    @Optional
    private String saveAuthTokenFlow;
    
    /**
     * The name of a flow to be invoked after an authorization callback is received.
     * If {@link usesCallback} is false then this flow will never be invoked.
     * 
     * This flow will receive a copy of the current mule message carrying two additional invocation variables:
     * 
     * <ul>
     * 	<li>boxAuthTicket: The ticket for which the authorization token was generated</li>
     * 	<li>boxAuthToken: The obtained authorization token
     * </ul>
     * 
     * For example:
     * 
     * &lt;box:config apiKey="${apiKey}" restoreAuthTokenFlow="restoreTokenFlow" saveAuthTokenFlow="saveTokenFlow"/&gt;
     * 
     *  &lt;flow name="restoreTokenFlow"&gt;
     *		&lt;objectstore:retrieve key="flowVars['currentUserId']"/&gt;
     *	&lt;/flow&gt;
     *
     *	&lt;flow name="save"&gt;
     *		&lt;objectstore:store key="flowVars['currentUserId']" value-ref="#[flowVars['boxAuthToken']]"/&gt;
     *	&lt;/flow&gt;
     * 
     * This flow will receive the same mule message the auth callback receives. If additionaly you also
     * provided a saveAuthTokenFlow, then any mutations done to the message there are also available in this flow
     */
    @Configurable
    @Optional
    private String postAuthFlow;
    
    /**
     * The http connector to be used when serving the authorization callback.
     * If {@link usesCallback} is false then this connector is not used.
     * 
     * If not provided, the default http connector under the key 'connector.http.mule.default' will be used.
     * However, specifying an https connector is adviced. 
     */
    @Configurable
    @Optional
    private org.mule.api.transport.Connector httpConnector;
    
    /**
     * Actual restore token flow egarly fetched
     */
    private Flow restoreTokenFlow;
    
    /**
     * Actual save token flow egarly fetched
     */
    private Flow saveTokenFlow;
    
    private Flow postAuthorizationFlow;
    
    private String authToken;
    
    private JerseyUtil jerseyUtil;
    
    private WebResource apiResource;
    
    private WebResource uploadResource;
    
    private WebResource authResource;
    
    /**
     * This method initiaes the box client and the auth callback.
     * Also, it fetches the save/restore flows (if specified). If those are specified
     * but don't exist in the registry, then IllegalArgumentException is thrown
     * 
     * @throws MuleException
     * @throws IllegalArgumentException if restore/save token flows are specified but don't exist
     */
    @Start
    public void init() throws MuleException {
    	ClientConfig clientConfig = new DefaultClientConfig();
    	clientConfig.getFeatures().put(JSONConfiguration.FEATURE_POJO_MAPPING, Boolean.TRUE);
    	clientConfig.getClasses().add(MultiPartWriter.class);
    	clientConfig.getClasses().add(MimeMultipartProvider.class);
    	clientConfig.getClasses().add(InputStreamProvider.class);
    	clientConfig.getClasses().add(FormProvider.class);
    	clientConfig.getClasses().add(FormMultivaluedMapProvider.class);
    	
    	this.client = Client.create(clientConfig);
    	
    	this.authCallback = new AuthCallbackAdapter(this.muleContext, this);
		this.authCallback.setLocalPort(this.getCallbackPort());
		this.authCallback.setAsync(false);

		if (this.usesCallback) {
			this.postAuthorizationFlow = this.fetchFlow(this.postAuthFlow);
			this.authCallback.start();
    	}
		
		this.restoreTokenFlow = this.fetchFlow(this.restoreAuthTokenFlow);
		this.saveTokenFlow = this.fetchFlow(this.saveAuthTokenFlow);
		
		this.initJerseyUtil();
		
		this.apiResource = this.client.resource(this.baseUrl);
		this.uploadResource = this.client.resource(this.uploadUrl);
		this.authResource = this.client.resource(this.authUrl);
    }
    
    private void initJerseyUtil() {
    	this.jerseyUtil = JerseyUtil.builder()
    						.addRequestBehaviour(MediaTypesBuilderBehaviour.INSTANCE)
    						.addRequestBehaviour(new AuthBuilderBehaviour(this))
    						.setResponseHandler(BoxResponseHandler.INSTANCE)
    						.build();
    }
    
    @Stop
    public void onStop() throws MuleException {
    	if (this.usesCallback) {
    		this.authCallback.stop();
    	}
    }
    
    
    /**
     * Get and access ticket using the configured apiKey. Optionally, you can ask the connector to automatically
     * redirect the browser to box authorization page so that the user can enter his credentials. This is done
     * by invoking {@link org.mule.modules.box.BoxConnector.authorizeTicket(MuleMessage, String)}
     * 
     * Otherwise, the user needs to manually go to {@link https://www.box.com/api/1.0/auth/&lt;&lt;ticket&gt;&gt;}
     * 
     * Either way, the connector <b>WILL NOT</b> be responsible for storing this ticket.
     * 
     * For more info look at {@link http://developers.box.com/get-started/}
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-ticket}
     * 
     * @param message the current mule message
     * @param redirect if true, then the browser will be automatically redirected to https://www.box.net/api/1.0/auth/&lt;&lt;ticket&gt;&gt;
     *  
     * @return the obtained ticket
     */
    @Processor
    @Inject
    public String getTicket(MuleMessage message, @Optional @Default("true") Boolean redirect) {
    	
    	GetTicketResponse response = this.authResource
						    			.queryParam("action", "get_ticket")
						    			.queryParam("api_key", this.apiKey)
							    		.accept(MediaType.APPLICATION_XML)
							    		.get(GetTicketResponse.class);
    	if (response.isValid()) {
    		
    		String ticket = response.getTicket();
    		
    		if (logger.isDebugEnabled()) {
    			logger.debug(String.format("Fetched ticket with apiKey %s and obtained %s", this.apiKey, ticket));
    		}

    		if (redirect) {
    			this.authorizeTicket(message, ticket);
    		}
    		
    		return ticket;
    	
    	} else {
    		throw new RuntimeException(String.format("Failed to obtain ticket. Box response was %s", response.getStatus()));
    	}
    	
    }
    
    /**
     * Redirects the browser to box authorization page so that the user can enter his credentials.
     * The new location will be {@link https://www.box.net/api/1.0/auth/&lt;&lt;ticket&gt;&gt;}
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:authorize-ticket}
     * 
     * @param message the current mule message
     * @param ticket the ticket to be authorized
     */
    @Processor
    @Inject
    public void authorizeTicket(MuleMessage message, String ticket) {
    	String redirectUrl = "https://www.box.com/api/1.0/auth/" + ticket;
    	
    	if (logger.isDebugEnabled()) {
    		logger.debug(String.format("redirecting to %s for authorizing ticket %s", redirectUrl, ticket));
    	}
    	
    	message.setOutboundProperty("http.status", "302");
    	message.setOutboundProperty("Location", redirectUrl);
    }

    /**
     * After the user authenticates the ticket obtained with the get-ticket processor,
     * there're two ways to get the required auth token:
     * 
     * <ol>
	 *	<li>
	 *		You can configure box.net to make a callback returning the ticket and authToken, in which case you need to set the
	 * 		usesCallback and callbackPath config attributes accordingly 
	 *	</li>
	 *	<li>
	 *		You can use this processor to obtain the authentication token explicitly.
	 *  </li>
	 *	</ol>
	 *
	 *  Either way, this connector will retain the authToken in memory and will use it in all operations.
	 *  
	 *  For more info look at http://developers.box.net/w/page/12923915/ApiAuthentication
     *
     * {@sample.xml ../../../doc/box-connector.xml.sample box:auth-token}
     *
     * @param message the current mule message
     * @param ticket the ticket to authenticate against.
     * @return an instance of {@link org.mule.modules.box.model.response.GetAuthTokenResponse} with information about the current user
     * @throws IllegalArgumentException if the ticket does not match a logged user
     */
    @Processor
    @Inject
    public GetAuthTokenResponse authToken(MuleMessage message, String ticket) {
    	

    	GetAuthTokenResponse response = this.authResource
							    			.queryParam("action", "get_auth_token")
							    			.queryParam("api_key", this.apiKey)
							    			.queryParam("ticket", ticket)
								    		.accept(MediaType.APPLICATION_XML)
								    		.get(GetAuthTokenResponse.class); 
    	
    	if (response.isNotLoggedIn()) {
    		String msg = "Failed to obtain authToken using ticket " + ticket + ". Not logged in";
       	 	logger.error(msg);
       	 	throw new IllegalStateException(msg);
    	}
    	
    	if (response.isValid()) {
    		String authToken = response.getAuthToken();
    		
    		if (logger.isDebugEnabled()) {
    			logger.debug(String.format("ticket %s mapped to authToken: %s", ticket, authToken));
    		}
    		
    		this.saveAuthToken(message, ticket, authToken);
    		return response;
    		
    	} else {
    		throw new RuntimeException(String.format("Status %s was obtained while fetching access token", response.getStatus()));
    	}
    }

    /**
     * Retrieves information about a given folder. If the folderId parameter is not
     * provided or equals 0, then the root folder will be returned.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-folder}
     * 
     * @param folderId the id of the fodler you want to get. 0 means root
     * @return an instance of {@link org.mule.modules.box.model.Folder}
     */
    @Processor
    public Folder getFolder(@Optional @Default("0") String folderId) {
    	return this.jerseyUtil.get(this.apiResource.path("folders").path(folderId), Folder.class, 200);
    }
    
    /**
     * Creates a new folder and returns a folder object with all its associated information
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:create-folder}
     * 
     * @param parentId the id of the parent folder. If not provided then the root will be used
     * @param folderName the name of the folder
     * @return an instance of {@link org.mule.modules.box.model.Folder} representing the newly created folder
     */
    @Processor
    public Folder createFolder(@Optional @Default("0") String parentId, String folderName) {
    	return this.jerseyUtil.post(this.apiResource.path("folders")
    							.entity(new CreateFolderRequest(folderName, parentId)),
	    						Folder.class,
	    						200, 201);
    }
    
    
    /**
     * Used to update information about the folder. To move a folder, update the ID of its parent.
     * To enable an email address that can be used to upload files to this folder, update the folderUploadEmail attribute.
     * An optional If-Match header can be included to ensure that client only updates the folder if it knows about the latest version by setting the etag attribute.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:update-folder}
     * 
     * @param request an instance of {@link org.mule.modules.box.model.request.UpdateItemRequest} with the attributes you want to change
     * @param folderId the id of the folder to be modified
     * @param etag if provided, it will be used to verify that no newer version of the file is available at box
     * @return an instance of {@link org.mule.modules.box.model.Folder} that represents the updated folder
     */
    @Processor
    public Folder updateFolder(@Optional @Default("#[payload]") UpdateItemRequest request, String folderId, @Optional String etag) {
    	WebResource resource = this.apiResource.path("folders").path(folderId);
    	return this.jerseyUtil.put(this.maybeAddIfMacth(resource, etag), Folder.class, 200, 201);
    }
    
    /**
     * Retrieves the discussions on a particular folder, if any exist.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-folder-discussions}
     * 
     * @param folderId the id of the folder which discussions  you want
     * @return an instance of {@link org.mule.modules.box.model.Entries}
     */
    @Processor
    public Entries getFolderDiscussions(String folderId) {
    	return this.jerseyUtil.get(this.apiResource.path("folders").path(folderId).path("discussions"), Entries.class, 200, 204);
    }
    
    /**
     * Get the folders in the Trash. Retrieves the files and/or folders that have been moved to the trash using the mini format.
     * Paginated results can be retrieved using the limit and offset parameters.

     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-trashed-items}
     * 
     * @param limit the maximum amount of items to be returned (default=100, max=1000)
     * @param offset pagination offset (default=0)
     * @return an instance of {@link org.mule.modules.box.model.FolderItems}
     */
    @Processor
    public FolderItems getTrashedItems(@Optional @Default("100") Long limit, @Optional @Default("0") Long offset) {
    	return this.getFolderItems("trash", limit, offset);
    }
    
    /**
     * Restores an item that has been moved to the trash. Default behavior is to restore the item to the folder it was in before it was moved to the trash.
     * If that parent folder no longer exists or if there is now an item with the same name in that parent folder,
     * the new parent folder and/or new name will need to be included in the request.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:restore-trashed-folder}
     * 
     * @param folderId the id of the trashed folder being restored
     * @param request an instance of {@link org.mule.modules.box.model.request.RestoreTrashedItemRequest} with the request parameters
     * @return an instance of {@link org.mule.modules.box.model.Folder} with the restored folder new state
     */
    @Processor
    public Folder restoreTrashedFolder(String folderId, @Optional @Default("#[payload]") RestoreTrashedItemRequest request) {
    	return this.jerseyUtil.post(this.apiResource
	    								.path("folders")
	    								.path(folderId)
	    								.entity(request)
    								, Folder.class
    								, 201);
    }
    
    /**
     * Permanently deletes an item that is in the trash. The item will no longer exist in Box. This action cannot be undone.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:perm-delete-folder}
     * 
     * @param folderId the id of the folder to be permanently deleted
     */
    @Processor
    public void permDeleteFolder(String folderId) {
    	this.jerseyUtil.delete(this.apiResource.path("folders").path(folderId).path("trash"), String.class, 204);
    }
    
    /**
     * Retrieves a folder that has been moved to the trash.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-trashed-folder}
     * 
     * @param folderId the id of the folder you want
     * @return an instance of {@link org.mule.modules.box.model.Folder}
     */
    @Processor
    public Folder getTrashedFolder(String folderId) {
    	return this.jerseyUtil.get(this.apiResource.path("folders").path(folderId).path("trash"), Folder.class, 200);
    }
    
    /**
     * Used to create a shared link for this particular folder
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:share-folder}
     * 
     * @param folderId the id of the folder you want to share
     * @param sharedLink an instance of {@link org.mule.modules.box.model.SharedLink} with the information about the share
     * @return an instance of {@link org.mule.modules.box.model.Folder} representing the shared folder
     */
    @Processor
    public Folder shareFolder(String folderId, @Optional @Default("#[payload]") SharedLink sharedLink) {
    	CreateSharedLinkRequest request = new CreateSharedLinkRequest();
    	request.setSharedLink(sharedLink);
    	
    	return this.jerseyUtil.put(this.apiResource.path("folders")
    								.path(folderId)
	    							.entity(request),
	    						Folder.class,
	    						200, 201);
    }
    
    /**
     * Deletes the shared link associated to a folder
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:unshare-folder}
     * 
     * @param folderId the id of the folder you want to unshare
     * @return an instance of {@link org.mule.modules.box.model.Folder} representing the unshared folder
     */
    @Processor
    public Folder unshareFolder(String folderId) {
    	return this.shareFolder(folderId, null);
    }
    
    /**
     * Used to create a shared link for this particular folder
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:share-folder}
     * 
     * @param targetFolderId the id of the parent folder that will hold the copy. If not provided then the root will be used
     * @param folderId the if od the folder being copied
     * @return an instance of {@link org.mule.modules.box.model.Folder} representing the copy
     */
    @Processor
    public Folder copyFolder(@Optional @Default("0") String targetFolderId, String folderId) {
    	FolderItem parent = new FolderItem();
    	parent.setId(targetFolderId);
    	CopyItemRequest request = new CopyItemRequest();
    	request.setParent(parent);
    	
    	return this.jerseyUtil.post(this.apiResource.path("folders")
    								.path(folderId)
    								.path("copy")
	    							.entity(request),
	    						Folder.class,
	    						200, 201);
    }
    
    /**
     * Retrieves the files and/or folders contained within this folder without any other metadata about the folder in the mini format is returned for each item by default.
     * Paginated results can be retrieved using the limit and offset parameters.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-folder-items}
     * 
     * @param folderId the id of the folder you want to inspect. If not provided then the root folder is assumed
     * @param limit the maximum amount of items to be returned (default=100, max=1000)
     * @param offset pagination offset (default=0)
     * @return an instance of {@link org.mule.modules.box.model.FolderItems}
     */
    @Processor
    public FolderItems getFolderItems(
    					@Optional @Default("0") String folderId,
    					@Optional @Default("100") Long limit,
    					@Optional @Default("0") Long offset) {
    	WebResource resource = this.apiResource
						    			.path("folders")
						    			.path(folderId)
						    			.path("items");
    	
    	if (offset != null) {
    		resource = resource.queryParam("offset", offset.toString());
    	}
    	
    	if (limit != null) {
    		resource = resource.queryParam("limit", limit.toString());
    	}
    	
    	return this.jerseyUtil.get(resource, FolderItems.class, 200);
    }
    
    /**
     * Traverses a given folder looking for a resource (file or folder) of a given name.
     *  
     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-folder-item}
     * 
     * @param folderId the id of the folder you want to inspect. If not provided then the root folder is assumed
     * @param resourceName the name you want to test
     * @return an instance of {@link org.mule.modules.box.model.descriptor.FolderItem} with that about the found item. {@code null} if the item is not found
     */
    @Processor
    public FolderItem getFolderItem(@Optional @Default("0") String folderId, String resourceName) {
    	FolderItems items = this.getFolderItems(folderId, null, null);
    	
    	for (FolderItem item : items.getEntries()) {
    		if (resourceName.equals(item.getName())) {
    			return item;
    		}
    	}
    	
    	return null;
    }
    
    /**
     * Deletes a folder
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:delete-folder}
     * 
     * @param folderId the id of the folder to be deleted
     * @param recursive Whether to delete this folder if it has items inside of it
     */
    @Processor
    public void deleteFolder(String folderId, @Optional @Default("true") Boolean recursive) {
    	this.jerseyUtil.delete(
    			this.apiResource
    				.path("folders")
    				.path(folderId)
    				.queryParam("recursive", recursive.toString())
    			, String.class, 200, 204);
    			
    	
    }
    
    /**
     * Creates a new file with the contents of a {@link java.io.InputStream}.
     * You need to take in count that since this is a stream, using the option of including a verification hash
     * will cause the contents of the input stream to be fully read and loaded in memory. 
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:upload-stream}
     * 
     * @param folderId the id of the target folder.
     * @param filename the name you want the file to have at box.
     * @param content a {@link java.io.InputStream} with the contents of the file. This stream will leave this processor in a closed state
     * @param includeHash if true a sha1 hash of the file will be calculated prior to upload. Box will use that hash
     * 			to verify that the content's hasn't been corrupted.
     * @param contentCreatedAt The time this file was created on the user’s machine. An example of a valid date is 2012-12-12T10:55:30-08:00
     * @param contentModifiedAt The time this file was modified on the user’s machine. An example of a valid date is 2012-12-12T10:55:30-08:00
     * @return an instance of {@link org.mule.modules.box.model.File} with the information of the created file
     */
    @Processor
    public File uploadStream(
    		@Optional @Default("0") String folderId,
    		String filename,
    		@Optional @Default("#[payload]") InputStream content,
    		@Optional @Default("false") boolean includeHash,
    		@Optional String contentCreatedAt,
    		@Optional String contentModifiedAt) {
    	
    	WebResource.Builder resource = this.uploadResource.path("content").type(MediaType.MULTIPART_FORM_DATA);
    	
    	if (includeHash) {
			resource.header("Content-MD5", this.hash(content));
    	}
    	
    	FormDataMultiPart form = new FormDataMultiPart();
		form.field("parent_id", folderId);
		
		if (!StringUtils.isBlank(contentCreatedAt)) {
			form.field("content_created_at", contentCreatedAt);
		}
		
		if (!StringUtils.isBlank(contentModifiedAt)) {
			form.field("content_modified_at", contentModifiedAt);
		}
		
		form.bodyPart(new StreamDataBodyPart(filename, content));
		
    	resource.entity(form);
    	
    	UploadFileResponse response = this.jerseyUtil.post(resource, UploadFileResponse.class, 200, 201);
    	return response.getEntries().get(0);
    }
    
    /**
     * Uploads a new version of a file from an input stream
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:upload-new-version-stream}
     * 
     * @param content a {@link java.io.InputStream} with the contents of the file. This stream will leave this processor in a closed state
     * @param fileId the id of the file to be updated
     * @param etag if provided, it will be used to verify that no newer version of the file is available at box
     * @param filename new name for the file
     * @param contentModifiedAt The time this file was modified on the user’s machine. An example of a valid date is 2012-12-12T10:55:30-08:00
     * @return an instance of {@link org.mule.modules.box.model.File} with the information of the updated file
     */
    @Processor
    public File uploadNewVersionStream(
    				@Optional @Default("#[payload]") InputStream content,
    				String fileId,
    				@Optional String etag,
    				String filename,
    				@Optional String contentModifiedAt) {
    	
    	WebResource.Builder resource = this.maybeAddIfMacth(this.uploadResource.path(fileId).path("content"), etag)
    											.type(MediaType.MULTIPART_FORM_DATA);
    	
    	FormDataMultiPart form = new FormDataMultiPart();
		
		if (!StringUtils.isBlank(contentModifiedAt)) {
			form.field("content_modified_at", contentModifiedAt);
		}
		
		form.bodyPart(new StreamDataBodyPart(filename, content));
		
    	resource.entity(form);
    	
    	UploadFileResponse response = this.jerseyUtil.post(resource, UploadFileResponse.class, 200, 201);
    	return response.getEntries().get(0);
    }
    
    /**
     * Uploads a new version of a file by reading the contents from a path in local storage
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:upload-new-version-stream}
     * 
     * @param path the path of the file in local storage
     * @param fileId the id of the file to be updated 
     * @param filename new name for the file
     * @param etag if provided, it will be used to verify that no newer version of the file is available at box
     * @param contentModifiedAt The time this file was modified on the user’s machine. An example of a valid date is 2012-12-12T10:55:30-08:00
     * @return an instance of {@link org.mule.modules.box.model.File} with the information of the updated file
     */
    @Processor
    public File uploadNewVersionPath(
    		String path, 
    		String fileId,
    		String filename,
    		@Optional String etag,
    		@Optional String contentModifiedAt) {
    	
    	return this.uploadNewVersionStream(this.readLocalFile(path), fileId, etag, filename, contentModifiedAt);
    }
    
    /**
     * Downloads a file
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:download}
     * 
     * @param fileId the id of the file you want
     * @param version The ID specific version of this file to download.
     * @return an input stream with the contents of the file
     */
    @Processor
    public InputStream download(String fileId, @Optional String version) {
    	WebResource resource = this.apiResource.path("files").path(fileId).path("content");
    	
    	if (version != null) {
    		resource.queryParam("version", version);
    	}
    	
    	return this.jerseyUtil.get(resource, InputStream.class, 200);
    }
    
    /**
     * Used to retrieve the metadata about a file.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-file-metadata}
     * 
     * @param fileId the id of the file you want to inspect
     * @return an instance of {@link org.mule.modules.box.model.File}
     */
    @Processor
    public File getFileMetadata(String fileId) {
    	return this.jerseyUtil.get(this.apiResource.path("files").path(fileId), File.class, 200);
    }
    
    /**
     * If there are previous versions of this file, this method can be used to retrieve metadata about the older versions.
     * Alert: Versions are only tracked for Box users with premium accounts.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-file-metadata}
     * 
     * @param fileId the id of the file which versions you want to pull
     * @return an instance of {@link org.mule.modules.box.model.response.FileVersionResponse} with the metadata about the versions
     */
    @Processor
    public FileVersionResponse getVersionsMetadata(String fileId) {
    	return this.jerseyUtil.get(this.apiResource.path("files").path(fileId).path("versions"), FileVersionResponse.class, 200, 201);
    }
    
    /**
     * Receives the path of a file in local storage and uploads its content
     *
     * {@sample.xml ../../../doc/box-connector.xml.sample box:upload-path}
     * 
     * @param path the path of the file in local storage
     * @param folderId the id of the target folder.
     * @param filename the name you want the file to have at box. If not provided, the name on current storage will be used
     * @param includeHash if true a sha1 hash of the file will be calculated prior to upload. Box will use that hash
     * 			to verify that the content's hasn't been corrupted. 
     * @param contentCreatedAt The time this file was created on the user’s machine. An example of a valid date is 2012-12-12T10:55:30-08:00
     * @param contentModifiedAt The time this file was modified on the user’s machine. An example of a valid date is 2012-12-12T10:55:30-08:00
     * 
     * @return an instance of {@link org.mule.modules.box.model.File} with the information of the created file
     */
    @Processor
    public File uploadPath(
    		String path, 
    		@Optional @Default("0") String folderId,
    		String filename,
    		@Optional @Default("false") boolean includeHash,
    		@Optional String contentCreatedAt,
    		@Optional String contentModifiedAt) {
    	
		return this.uploadStream(folderId,
								filename,
								this.readLocalFile(path),
								includeHash,
								contentCreatedAt,
								contentModifiedAt);
    }
    
    /**
     * Discards a file to the trash. The etag of the file can be included as an ‘If-Match’ header to prevent race conditions.
     * Depending on the enterprise settings for this user, the item will either be actually deleted from Box or moved to the trash.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:delete-file}
     * 
     * @param fileId the id of the file to be deleted
     * @param etag if provided, it will be used to verify that no newer version of the file is available at box
     */
    @Processor
    public void deleteFile(String fileId, @Optional String etag) {
    	WebResource resource = this.apiResource.path("files").path(fileId);
    	this.jerseyUtil.delete(this.maybeAddIfMacth(resource, etag), String.class, 200, 204);
    }
    
    /**
     * Update a file’s information. Used to update individual or multiple fields in the file object, including renaming the file,
     * changing it’s description, and creating a shared link for the file.
     * To move a file, change the ID of its parent folder.
     * An optional etag can be provided to ensure that client only updates the file if it knows about the latest version
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:update-file}
     * 
     * @param fileId the id of the file which metadata you want to update
     * @param request an instance of {@link org.mule.modules.box.model.request.UpdateItemRequest} carrying the update parameters
     * @param etag if provided, it will be used to verify that no newer version of the file is available at box 
     * @return an instance of {@link org.mule.modules.box.model.File} with the updated state of the file
     */
    @Processor
    public File updateFile(String fileId, @Optional @Default("#[payload]") UpdateItemRequest request, @Optional String etag) {
    	WebResource resource = this.apiResource.path("files").path(fileId);
    	return this.jerseyUtil.put(this.maybeAddIfMacth(resource, etag), File.class, 200, 201);
    }
    
    /**
     * Used to create a copy of a file in another folder. The original version of the file will not be altered.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:copy-file}
     * 
     * @param fileId the id of the file you want to copy
     * @param targetFolderId the if of the target folder. Defaults to the root folder
     * @return and instance of {@link org.mule.modules.box.model.File} representing the copy of the file
     */
    @Processor
    public File copyFile(@Optional @Default("0") String targetFolderId, String fileId) {
    	FolderItem parent = new FolderItem();
    	parent.setId(targetFolderId);
    	CopyItemRequest request = new CopyItemRequest();
    	request.setParent(parent);
    	
    	return this.jerseyUtil.post(this.apiResource.path("files")
    								.path(fileId)
    								.path("copy")
	    							.entity(request),
	    						File.class,
	    						200, 201);
    }
    
    /**
     * Used to create a shared link for this particular file.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:share-file}
     * 
     * @param fileId the id of the file you want to share
     * @param sharedLink an instance of {@link org.mule.modules.box.model.SharedLink} with the information about the share
     * @return an instance of {@link org.mule.modules.box.model.File} representing the shared folder
     */
    @Processor
    public File shareFile(String fileId, @Optional @Default("#[payload]") SharedLink sharedLink) {
    	CreateSharedLinkRequest request = new CreateSharedLinkRequest();
    	request.setSharedLink(sharedLink);
    	
    	return this.jerseyUtil.put(this.apiResource.path("files")
    								.path(fileId)
	    							.entity(request),
	    						File.class,
	    						200, 201);
    }
    
    /**
     * Deletes the shared link associated to a file
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:unshare-file}
     * 
     * @param fileId the id of the file you want to unshare
     * @return an instance of {@link org.mule.modules.box.model.File} representing the unshared folder
     */
    @Processor
    public File unshareFile(String fileId) {
    	return this.shareFile(fileId, null);
    }
    
    /**
     * Retrieves the comments on a particular file, if any exist.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-file-comments}
     * 
     * @param fileId the id of the while which comments you want
     * @return an instance of {@link org.mule.modules.box.model.response.GetCommentsResponse}
     */
    @Processor
    public GetCommentsResponse getFileComments(String fileId) {
    	return this.jerseyUtil.get(this.apiResource.path("files").path("comments"), GetCommentsResponse.class, 200);
    }
    
    /**
     * Retrieves a thumbnail, or smaller image representation, of this file.
     * Sizes of 32x32, 64x64, 128x128, and 256x256 can be returned.
     * Currently thumbnails are only available in .png format and will only be generated for image file formats.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-file-thumbnail}
     * 
     * @param fileId the id of the file which thumb you want
     * @param minSize the minimum size you're interested in
     * @param maxSize the maximum size you're interested in
     * @return an InputStream with the content of the thumb. Remember to close it!
     */
    @Processor
    public InputStream getFileThumbnail(String fileId, @Optional ThumbnailSize minSize, @Optional ThumbnailSize maxSize) {
    	WebResource resource = this.apiResource.path("files").path(fileId).path("thumbnail.extension");
    	
    	if (minSize != null) {
    		resource = minSize.setAsMin(resource);
    	}
    	
    	if (maxSize != null) {
    		resource = maxSize.setAsMax(resource);
    	}
    	
    	return this.jerseyUtil.get(resource, InputStream.class, 200, 202);
    }
    
    /**
     * Retrieves the metadata of a trashed file

     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-trashed-file}
     * 
     * @param fileId the id of the trashed file you want
     * @return an instance of {@link org.mule.modules.box.model.File}
     */
    @Processor
    public File getTrashedFile(String fileId) {
    	return this.jerseyUtil.get(this.apiResource.path("files").path(fileId).path("trash"), File.class, 200);
    }
    
    /**
     * Restores a file that has been moved to the trash. Default behavior is to restore the item to the folder it was in before it was moved to the trash.
     * If that parent folder no longer exists or if there is now an item with the same name in that parent folder,
     * the new parent folder and/or new name will need to be included in the request.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:restore-trashed-file}
     * 
     * @param fileId the id of the trashed file being restored
     * @param request an instance of {@link org.mule.modules.box.model.request.RestoreTrashedItemRequest} with the request parameters
     * @return an instance of {@link org.mule.modules.box.model.Folder} with the restored folder new state
     */
    @Processor
    public File restoreTrashedFile(String fileId, @Optional @Default("#[payload]") RestoreTrashedItemRequest request) {
    	return this.jerseyUtil.post(this.apiResource
	    								.path("files")
	    								.path(fileId)
	    								.entity(request)
    								, File.class
    								, 201);
    }
    
    /**
     * Permanently deletes an item that is in the trash. The item will no longer exist in Box. This action cannot be undone.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:perm-delete-file}
     * 
     * @param fileId the id of the file to be permanently deleted
     */
    @Processor
    public void permDeleteFile(String fileId) {
    	this.jerseyUtil.delete(this.apiResource.path("files").path(fileId).path("trash"), String.class, 204);
    }
    
    /**
     * Used to retrieve the message and metadata about a specific comment. Information about the user who created the comment is also included.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:get-comment}
     * 
     * @param commentId the id of the comment you want
     * @return an instance of {@link org.mule.modules.box.model.Comment} representing the message
     */
    @Processor
    public Comment getComment(String commentId) {
    	return this.jerseyUtil.get(this.apiResource.path("comments").path(commentId), Comment.class, 200);
    }
    
    /**
     * Used to add a comment by the user to a specific file
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:comment-file}
     * 
     * @param fileId the id of the file to be commented on
     * @param message text of the comment to be posted
     * @return an instance of {@link org.mule.modules.box.model.Comment} representing the created message
     */
    @Processor
    public Comment commentFile(String fileId, String message) {
    	Map<String, String> entity = new HashMap<String, String>();
    	entity.put("message", message);
    	
    	return this.jerseyUtil.post(this.apiResource.path("files").path(fileId).path("comments"), Comment.class, 200, 201);
    }
    
    /**
     * Used to update the message of the comment.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:update-comment}
     * 
     * @param commentId the id of the comment to be updated
     * @param newMessage the new message
     * @return an instance of {@link org.mule.modules.box.model.Comment} representing the updated message
     */
    @Processor
    public Comment updateComment(String commentId, String newMessage) {
    	Map<String, String> entity = new HashMap<String, String>();
    	entity.put("message", newMessage);
    	
    	return this.jerseyUtil.put(this.apiResource.path("comments").path(commentId), Comment.class, 200, 201);
    }
    
    /**
     * Delets a comment.
     * 
     * {@sample.xml ../../../doc/box-connector.xml.sample box:delete-comment}
     * 
     * @param commentId the id of the comment to be deleted
     */
    @Processor
    public void deleteComment(String commentId) {
    	this.jerseyUtil.delete(this.apiResource.path("comments").path(commentId), Comment.class, 200);
    }
    

    public String getAuthToken(MuleMessage message) {
    	String token = null;
    	
    	if (this.restoreTokenFlow == null) {
    	
    		token = this.authToken;
    	
    	} else {
    		MuleMessage restoreMessage = FlowUtils.callFlow(this.restoreTokenFlow, new DefaultMuleMessage(message)); 
    		Object payload = restoreMessage.getPayload();
    		
    		if (payload instanceof String) {
    			token = (String) payload;
    			return token;
    		} else {
    			throw new IllegalArgumentException(
    					String.format("A String payload was expected after invoking restore token flow '%s', but %s was found instead",
    							this.restoreAuthTokenFlow,
    							payload == null ? "null" : payload.getClass().getCanonicalName()
    							)
    					);
    		}
    	}
    	
    	if (StringUtils.isBlank(token)) {
    		throw new IllegalStateException("Auth token not obtained yet");
    	}
    	
    	return token;
    }
    
    private WebResource.Builder maybeAddIfMacth(WebResource resource, String etag) {
    	Builder builder = resource.getRequestBuilder();
    	
    	if (!StringUtils.isBlank(etag)) {
    		builder = builder.header("If-Match", etag);
    	}
    	
    	return builder;
    }
    
    private InputStream readLocalFile(String path) {
    	java.io.File file = new java.io.File(path);
		
		if (!file.exists()) {
			throw new IllegalArgumentException(String.format("File %s does not exist", path));
		}
    	
		try {
			return new ByteArrayInputStream(FileUtils.readFileToByteArray(file));
		} catch (IOException e) {
			throw new RuntimeException(String.format("Error reading file at %s", path), e);
		}
    }
    
    
    private Flow fetchFlow(String flowname) {
    	if (StringUtils.isBlank(flowname)) {
    		return null;
    	}
    	
    	Flow flow = FlowUtils.getFlow(flowname, muleContext);
    	
    	if (flow == null) {
    		throw new IllegalArgumentException(String.format("flow %s doesn't exists", flowname));
    	}
    	
    	return flow;
    }
    
    public MuleMessage saveAuthToken(MuleMessage message, String ticket, String authToken) {
	   
	   if (StringUtils.isBlank(ticket)) {
		   throw new IllegalArgumentException("auth process did not return a ticket");
	   }
	   
	   if (StringUtils.isBlank(authToken)) {
		   throw new IllegalArgumentException("auth process did not return an auth token");
	   }
	   
	   MuleMessage copy = new DefaultMuleMessage(message);
	   copy.setInvocationProperty(BOX_AUTH_TICKET, ticket);
	   copy.setInvocationProperty(BOX_AUTH_TOKEN, authToken);
	   
	   if (this.saveTokenFlow == null) {
			this.authToken = authToken;
	   } else {
			FlowUtils.callFlow(this.saveTokenFlow, copy);
	   }
	   
	   this.postAuth(copy);
	   
	   return copy;
    }
   
   private void postAuth(MuleMessage message) {
	   if (this.postAuthorizationFlow != null) {
		   if (logger.isDebugEnabled()) {
			   logger.debug(String.format("invoking post authorization flow %s with message %s", this.postAuthFlow, message.toString()));
		   }
		   FlowUtils.callFlow(this.postAuthorizationFlow, message);
	   } else {
		   if (logger.isDebugEnabled()) {
			   logger.debug("No post auth flow specified");
		   }
	   }
   }
   
   private String hash(InputStream content) {
   	byte[] bytes = null;
		try {
			bytes = IOUtils.toByteArray(content);
		} catch (IOException e) {
			throw new RuntimeException("Error generating sha1 for content", e);
		}
		
		Formatter formatter = new Formatter();
		try {
			for (byte b : bytes) {
				formatter.format("%02x", b);
			}
			return formatter.toString();
		} finally {
			formatter.close();
		}
   }
   
	public String getCallbackPath() {
		return callbackPath;
	}

	public void setCallbackPath(String callbackPath) {
		this.callbackPath = callbackPath;
	}

	public void setApiKey(String apiKey) {
		this.apiKey = apiKey;
	}
	
	public Integer getCallbackPort() {
		return callbackPort;
	}

	public void setCallbackPort(Integer callbackPort) {
		this.callbackPort = callbackPort;
	}
	
	public boolean isUsesCallback() {
		return usesCallback;
	}

	public void setUsesCallback(boolean usesCallback) {
		this.usesCallback = usesCallback;
	}

	@Override
	public void setMuleContext(MuleContext context) {
		this.muleContext = context;
	}

	public String getRestoreAuthTokenFlow() {
		return restoreAuthTokenFlow;
	}

	public void setRestoreAuthTokenFlow(String restoreAuthTokenFlow) {
		this.restoreAuthTokenFlow = restoreAuthTokenFlow;
	}

	public String getSaveAuthTokenFlow() {
		return saveAuthTokenFlow;
	}

	public void setSaveAuthTokenFlow(String saveAuthTokenFlow) {
		this.saveAuthTokenFlow = saveAuthTokenFlow;
	}

	public String getApiKey() {
		return apiKey;
	}

	public org.mule.api.transport.Connector getHttpConnector() {
		return httpConnector;
	}

	public void setHttpConnector(org.mule.api.transport.Connector httpConnector) {
		this.httpConnector = httpConnector;
	}

	public String getPostAuthFlow() {
		return postAuthFlow;
	}

	public void setPostAuthFlow(String postAuthFlow) {
		this.postAuthFlow = postAuthFlow;
	}

	public String getBaseUrl() {
		return baseUrl;
	}

	public void setBaseUrl(String baseUrl) {
		this.baseUrl = baseUrl;
	}

	public String getAuthUrl() {
		return authUrl;
	}

	public void setAuthUrl(String authUrl) {
		this.authUrl = authUrl;
	}

	public String getUploadUrl() {
		return uploadUrl;
	}

	public void setUploadUrl(String uploadUrl) {
		this.uploadUrl = uploadUrl;
	}
}
